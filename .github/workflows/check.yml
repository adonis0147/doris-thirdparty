name: Check (macOS arm64)

on:
  push:
  schedule:
    - cron: '*/30 * * * *'

jobs:
  check:
    name: Check
    runs-on: ubuntu-latest
    env:
      GH_REPO: ${{ github.repository }}
      GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    permissions:
      contents: write
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          repository: 'apache/doris'
          fetch-depth: 0

      - name: Release
        run: |
          branches=('master' 'branch-1.2-lts' 'branch-2.0')

          if [[ -z "$(gh release list)" ]] ||
              ! gh release list | awk -F "\t" '{ print $3 }' | grep 'cirrus-ci' >/dev/null; then
            gh release create -t 'Apache Doris Third Party Prebuilt (Cirrus-CI)' cirrus-ci
          fi

          echo "Update Time: *$(date)*" >release_note.md

          content="$(gh release view cirrus-ci | sed -n '/--/,$p' | awk '{ if (NR > 1) print $0 }')"
          for branch in "${branches[@]}"; do
            version="$(echo "${content}" | grep -E "^${branch}" | sed -n -E "s/${branch}: \*(.*)\*.*/\1/p")"
            echo "${branch}: *${version}*" >>release_note.md
          done

          gh release edit -F release_note.md cirrus-ci

      - name: Check
        run: |
          branches=('master' 'branch-1.2-lts' 'branch-2.0')
          content="$(gh release view cirrus-ci | sed -n '/--/,$p' | awk '{ if (NR > 1) print $0 }')"

          stale_branches=()
          for branch in "${branches[@]}"; do
            git checkout "${branch}"

            last_version="$(echo "${content}" | grep -E "^${branch}:" | sed -n -E "s/${branch}: \*(.*)\*.*/\1/p")"
            current_version="$(git log -1 --format='%H')"

            echo "Branch: ${branch}"
            echo "Last Version: ${last_version}"
            echo "Current Version: ${current_version}"

            should_release=false
            if [[ -z "${last_version}" ]]; then
              echo "The first release was detected."
              should_release=true
            elif [[ "${last_version}" != "${current_version}" ]]; then
              cmd="git diff --name-only ${last_version} ${current_version} | grep -E '^thirdparty/'"
              echo "Execute: ${cmd}"
              result="$(eval "${cmd}")" || true
              if [[ -n "${result}" ]]; then
                echo -e "Detect changes:\n${result}"
                should_release=true
              fi
            fi

            if ! "${should_release}"; then
              content="$(echo "${content}" | sed "{
                s/Update Time:.*/Update Time: *$(date)*/
                s/${branch}:.*/${branch}: *${current_version}*/
              }")"
            else
              stale_branches[${#stale_branches[@]}]="${branch}"
            fi

            echo
          done

          echo "${content}" >release_note.md
          gh release edit -F release_note.md cirrus-ci

          if [[ "${#stale_branches[@]}" -gt 0 ]]; then
            echo "Stale Branches: ${stale_branches[@]}"
            exit 1
          fi
