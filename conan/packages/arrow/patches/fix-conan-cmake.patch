diff --git a/cpp/CMakeLists.txt b/cpp/CMakeLists.txt
index 2d7baf1..191a34b 100644
--- a/cpp/CMakeLists.txt
+++ b/cpp/CMakeLists.txt
@@ -715,7 +715,7 @@ if(ARROW_WITH_BZ2)
 endif()
 
 if(ARROW_WITH_LZ4)
-  list(APPEND ARROW_STATIC_LINK_LIBS LZ4::lz4)
+  list(APPEND ARROW_STATIC_LINK_LIBS LZ4::lz4_static)
   if(Lz4_SOURCE STREQUAL "SYSTEM")
     list(APPEND ARROW_STATIC_INSTALL_INTERFACE_LIBS LZ4::lz4)
   endif()
@@ -743,8 +743,8 @@ if(ARROW_WITH_ZSTD)
 endif()
 
 if(ARROW_ORC)
-  list(APPEND ARROW_LINK_LIBS orc::liborc ${ARROW_PROTOBUF_LIBPROTOBUF})
-  list(APPEND ARROW_STATIC_LINK_LIBS orc::liborc ${ARROW_PROTOBUF_LIBPROTOBUF})
+  list(APPEND ARROW_LINK_LIBS ORC::ORC ${ARROW_PROTOBUF_LIBPROTOBUF})
+  list(APPEND ARROW_STATIC_LINK_LIBS ORC::ORC ${ARROW_PROTOBUF_LIBPROTOBUF})
   if(ORC_SOURCE STREQUAL "SYSTEM")
     list(APPEND ARROW_STATIC_INSTALL_INTERFACE_LIBS orc::liborc
          ${ARROW_PROTOBUF_LIBPROTOBUF})
diff --git a/cpp/cmake_modules/BuildUtils.cmake b/cpp/cmake_modules/BuildUtils.cmake
index 391c43e..dbb9012 100644
--- a/cpp/cmake_modules/BuildUtils.cmake
+++ b/cpp/cmake_modules/BuildUtils.cmake
@@ -165,7 +165,7 @@ function(create_merged_static_lib output_target)
   endforeach()
 
   if(APPLE)
-    set(BUNDLE_COMMAND "libtool" "-no_warning_for_no_symbols" "-static" "-o"
+    set(BUNDLE_COMMAND "/usr/bin/libtool" "-no_warning_for_no_symbols" "-static" "-o"
                        ${output_lib_path} ${all_library_paths})
   elseif(CMAKE_CXX_COMPILER_ID MATCHES "^(Clang|GNU|Intel)$")
     set(ar_script_path ${CMAKE_BINARY_DIR}/${ARG_NAME}.ar)
diff --git a/cpp/cmake_modules/ThirdpartyToolchain.cmake b/cpp/cmake_modules/ThirdpartyToolchain.cmake
index bc38952..c48f547 100644
--- a/cpp/cmake_modules/ThirdpartyToolchain.cmake
+++ b/cpp/cmake_modules/ThirdpartyToolchain.cmake
@@ -938,6 +938,7 @@ endif()
 # - Tests need Boost at runtime.
 # - S3FS and Flight benchmarks need Boost at runtime.
 if(ARROW_BUILD_INTEGRATION
+   OR ARROW_BOOST_REQUIRED
    OR ARROW_BUILD_TESTS
    OR (ARROW_FLIGHT AND ARROW_BUILD_BENCHMARKS)
    OR (ARROW_S3 AND ARROW_BUILD_BENCHMARKS))
@@ -1309,9 +1310,9 @@ if(ARROW_NEED_GFLAGS)
                      IS_RUNTIME_DEPENDENCY
                      FALSE)
   # TODO: Don't use global includes but rather target_include_directories
-  include_directories(SYSTEM ${GFLAGS_INCLUDE_DIR})
+  include_directories(SYSTEM ${gflags_INCLUDE_DIR})
 
-  if(NOT TARGET ${GFLAGS_LIBRARIES})
+  if(NOT TARGET ${gflags_LIBRARIES})
     if(TARGET gflags-shared)
       set(GFLAGS_LIBRARIES gflags-shared)
     elseif(TARGET gflags_shared)
@@ -1538,7 +1539,7 @@ if(ARROW_WITH_PROTOBUF)
   endif()
 
   # TODO: Don't use global includes but rather target_include_directories
-  include_directories(SYSTEM ${PROTOBUF_INCLUDE_DIR})
+  include_directories(SYSTEM ${Protobuf_INCLUDE_DIR})
 
   if(TARGET arrow::protobuf::libprotobuf)
     set(ARROW_PROTOBUF_LIBPROTOBUF arrow::protobuf::libprotobuf)
@@ -1593,7 +1594,7 @@ if(ARROW_WITH_PROTOBUF)
   message(STATUS "Found libprotoc: ${Protobuf_PROTOC_LIBRARY}")
   get_target_property(PROTOBUF_LIBRARY ${ARROW_PROTOBUF_LIBPROTOBUF} IMPORTED_LOCATION)
   message(STATUS "Found libprotobuf: ${PROTOBUF_LIBRARY}")
-  message(STATUS "Found protobuf headers: ${PROTOBUF_INCLUDE_DIR}")
+  message(STATUS "Found protobuf headers: ${Protobuf_INCLUDE_DIR}")
 endif()
 
 # ----------------------------------------------------------------------
@@ -2143,7 +2144,7 @@ if(ARROW_WITH_LZ4)
   resolve_dependency(Lz4 PC_PACKAGE_NAMES liblz4)
 
   # TODO: Don't use global includes but rather target_include_directories
-  get_target_property(LZ4_INCLUDE_DIR LZ4::lz4 INTERFACE_INCLUDE_DIRECTORIES)
+  get_target_property(LZ4_INCLUDE_DIR LZ4::lz4_static INTERFACE_INCLUDE_DIRECTORIES)
   include_directories(SYSTEM ${LZ4_INCLUDE_DIR})
 endif()
 
@@ -3885,7 +3886,7 @@ endmacro()
 if(ARROW_ORC)
   resolve_dependency(ORC)
   include_directories(SYSTEM ${ORC_INCLUDE_DIR})
-  message(STATUS "Found ORC static library: ${ORC_STATIC_LIB}")
+  message(STATUS "Found ORC static library: ${ORC_LIBRARIES}")
   message(STATUS "Found ORC headers: ${ORC_INCLUDE_DIR}")
 endif()
 
